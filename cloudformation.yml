AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS IAM Access Keys Audit"

Parameters:
  GeneralName:
    Type: "String"
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    Default: "lambda-iam-keys-audit"

  LambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[0-9a-zA-Z_/]*$"
    Default: "lambda_iam_keys_audit"

  SNSEmailSubscription:
    Type: "String"
    AllowedPattern: "^[0-9a-zA-Z@/./]*$"  
    Default: "dustin@1strategy.com"


Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Ref "GeneralName"
      Tags:
        - 
          Key: "project"
          Value: !Ref "LambdaFunctionName"

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    DependsOn: S3Bucket
    Properties:
      Description: "Audit user access keys"
      Code: ./src/lambda_iam_keys_audit.zip
      FunctionName: !Ref "LambdaFunctionName"
      Handler: lambda_iam_keys_audit.lambda_handler
      MemorySize: 128
      Role: !GetAtt "LambdaRole.Arn"
      Runtime: python3.6
      Timeout: 10
      Tags:
        - 
          Key: "project"
          Value: !Ref "LambdaFunctionName"      
      Environment:
        Variables:
          MAX_KEY_AGE_DAYS: 90
          DELETE_KEY_WAITING_DAYS: 2
          SNS_TARGET_ARN: !Ref "SNSTopic"

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies: 
      - PolicyName: logs
        PolicyDocument: 
          Statement: 
          - Effect: Allow
            Action: 
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*" 
      - PolicyName: ec2
        PolicyDocument: 
          Statement: 
          - Effect: Allow
            Action: 
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            Resource: 
            - "*"
      - PolicyName: iam
        PolicyDocument: 
          Statement: 
          - Effect: Allow
            Action: 
              - iam:DeleteAccessKey
              - iam:ListAccessKeys
              - iam:ListUsers
              - iam:UpdateAccessKey
            Resource: 
            - "*"            
      - PolicyName: sns
        PolicyDocument: 
          Statement: 
          - Effect: Allow
            Action: 
              - sns:Publish
            Resource: 
              - !Ref "SNSTopic"

  LambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionName}"
      RetentionInDays: 90

  CloudWatchRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Trigger Lambda to audit iam access keys"
      Name: !Ref "GeneralName"
      ScheduleExpression: "rate(1 minute)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: !GetAtt "LambdaFunction.Arn"
          Id: "LambdaIamKeyAudit"

  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt "CloudWatchRule.Arn"

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: !Ref "GeneralName"
      TopicName: !Ref "GeneralName"

  SNSSubscription:
    Type: "AWS::SNS::Subscription"
    Properties:
      Endpoint: !Ref "SNSEmailSubscription"
      Protocol: "email"
      TopicArn: !Ref "SNSTopic"

Outputs:
  lambdaArn:
    Value: !GetAtt "LambdaFunction.Arn"
