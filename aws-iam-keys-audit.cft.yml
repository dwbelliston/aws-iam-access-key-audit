AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS IAM Access Keys Audit"

Parameters:
  LambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "lambda_iam_keys_audit"

Resources:
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Audit user access keys"
      Code: ./src/lambda_iam_keys_audit.zip
      FunctionName: !Ref "LambdaFunctionName"
      Handler: lambda_iam_keys_audit.lambda_handler
      MemorySize: 128
      Role: !GetAtt "LambdaRole.Arn"
      Runtime: python3.6
      Timeout: 10
      Environment:
        Variables:
          MAX_KEY_AGE_DAYS: 90
          DELETE_KEY_WAITING_DAYS: 2

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies: 
      - PolicyName: logs
        PolicyDocument: 
          Statement: 
          - Effect: Allow
            Action: 
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: 
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunctionName}:*" 
      - PolicyName: ec2
        PolicyDocument: 
          Statement: 
          - Effect: Allow
            Action: 
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            Resource: 
            - "*"

  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionName}"
      RetentionInDays: 90

Outputs:
  lambdaArn:
    Value: !GetAtt "LambdaFunction.Arn"
